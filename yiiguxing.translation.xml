<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="556" />
    <option name="newTranslationDialogX" value="760" />
    <option name="newTranslationDialogY" value="449" />
    <histories>
      <item value="DUPLICATE TICKET LAYOUT NAME" />
      <item value="exist Po List" />
      <item value="end Time Exclude" />
      <item value="NORM DATETIME MINUTE PATTERN" />
      <item value="NORM DATETIME PATTERN" />
      <item value="不需要endWith，只需要前缀ok" />
      <item value="not need endWith , only prefix ok" />
      <item value="finish" />
      <item value="进行告警通知" />
      <item value="是否还需要告警" />
      <item value="不一致" />
      <item value="prepare" />
      <item value="提前多少时间查询" />
      <item value="time Seconds Internvl" />
      <item value="Gets the threadLocal of the singleton" />
      <item value="转增开关" />
      <item value="batch Upload Pic Url" />
      <item value="是否上传照片" />
      <item value="has Update Photo" />
      <item value="company Name" />
      <item value="check Duplicate Category Name" />
      <item value="刷新" />
      <item value="hello" />
      <item value="If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value." />
      <item value="增加" />
      <item value="stock Statistics Info List" />
      <item value="逻辑删除" />
      <item value="Issue" />
      <item value="elasticsearch" />
      <item value="服务启动加载配置文件失败" />
      <item value="VERTICAL" />
      <item value="一竖" />
      <item value="竖线" />
      <item value="点号" />
      <item value="Formal parameter declaration" />
      <item value="springboot" />
      <item value="FLOW GRADE THREAD" />
      <item value="FLOW GRADE QPS" />
      <item value="Max queueing time in rate limiter behavior." />
      <item value="Batch consumption size" />
      <item value="Set {@code key} to hold the string {@code value} if {@code key} is absent. @param key must not be {@literal null}. @param value must not be {@literal null}. @return {@literal null} when used in pipeline transaction. @see &lt;a href=&quot;http:redis.iocommandssetnx&quot;&gt;Redis Documentation: SETNX&lt;a&gt;" />
      <item value="ParameterizedType represents a parameterized type such as Collection&lt;String&gt;. A parameterized type is created the first time it is needed by a reflective method, as specified in this package. When a parameterized type p is created, the generic type declaration that p instantiates is resolved, and all type arguments of p are created recursively. See TypeVariable for details on the creation process for type variables. Repeated creation of a parameterized type has no effect. Instances of classes that implement this interface must implement an equals() method that equates any two instances that share the same generic type declaration and have equal type parameters. Since: 1.5" />
      <item value="ORDER FINISH" />
      <item value="It is not recommend to throw exception,rather than returning ConsumeConcurrentlyStatus.RECONSUME_LATER if consumption failure Params: msgs – msgs.size() &gt;= 1 DefaultMQPushConsumer.consumeMessageBatchMaxSize=1,you can modify here Returns: The consume status" />
      <item value="Subscribe a topic to consuming subscription. @param topic topic to subscribe. @param subExpression subscription expression.it only support or operation such as &quot;tag1 || tag2 || tag3&quot; &lt;br&gt; if null or expression,meaning subscribe all @throws MQClientException if there is any client error." />
      <item value="Suspend current queue a moment" />
      <item value="PERPERTY" />
      <item value="A MessageListenerConcurrently object is used to receive asynchronously delivered messages orderly.one queue,one thread" />
      <item value="A MessageListenerConcurrently object is used to receive asynchronously delivered messages concurrently" />
      <item value="SEPARATOR" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="261" />
        <entry key="ENGLISH" value="260" />
        <entry key="LATIN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="SPANISH" value="1" />
        <entry key="HINDI" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1673233001372" />
  </component>
  <component name="Settings">
    <option name="showWordForms" value="false" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6b553daa9fb85ebc" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1681292837632" />
  </component>
  <component name="Translation.Settings">
    <option name="primaryLanguage" value="AUTO" />
    <option name="translator" value="YOUDAO" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="6b553daa9fb85ebc" />
      </youdao-translate>
    </option>
  </component>
  <component name="Translation.States">
    <option name="newTranslationDialogWidth" value="594" />
    <option name="newTranslationDialogX" value="653" />
    <option name="newTranslationDialogY" value="391" />
    <option name="pinTranslationDialog" value="true" />
    <histories>
      <item value="combine List" />
      <item value="class if this class is an array" />
      <item value="Type Token" />
      <item value="@return the current (existing or computed) value associated with the specified key, or null if the computed value is null" />
      <item value="If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless {@code null}. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map." />
      <item value="compute If Absent" />
      <item value="An {@link ExecutorService} for running {@link ForkJoinTask}s. A {@code ForkJoinPool} provides the entry point for submissions from non-{@code ForkJoinTask} clients, as well as management and monitoring operations." />
      <item value="实际" />
      <item value="actural" />
      <item value="actural processor method" />
      <item value="实际处理的方法" />
      <item value="tricky method to check the first char" />
      <item value="&lt;p&gt; The string {@code &quot;unchecked&quot;} is used to suppress unchecked warnings. Compiler vendors should document the additional warning names they support in conjunction with this annotation type. They are encouraged to cooperate to ensure that the same names work across multiple compilers. @return the set of warnings to be suppressed" />
      <item value="decode" />
      <item value="class &#10;tuple" />
      <item value="class tuple" />
      <item value="Class Tuple" />
      <item value="&amp;64;SneakyThrow will avoid javac's insistence that you either catch or throw onward any checked exceptions that statements in your method body declare they generate. &lt;p&gt; &amp;64;SneakyThrow does not silently swallow, wrap into RuntimeException, or otherwise modify any exceptions of the listed checked exception types. The JVM does not check for the consistency of the checked exception system; javac does, and this annotation lets you opt out of its mechanism. &lt;p&gt; Complete documentation is found at &lt;a href=&quot;https:projectlombok.orgfeaturesSneakyThrows&quot;&gt;the project lombok features page for &amp;64;SneakyThrows&lt;a&gt;. &lt;p&gt; Example: &lt;pre&gt; &amp;64;SneakyThrows(UnsupportedEncodingException.class) public void utf8ToString(byte[] bytes) { return new String(bytes, &quot;UTF-8&quot;); } &lt;pre&gt; Becomes: &lt;pre&gt; public void utf8ToString(byte[] bytes) { try { return new String(bytes, &quot;UTF-8&quot;); } catch (UnsupportedEncodingException uniqueName) { throw useMagicTrickeryToHideThisFromTheCompiler(uniqueName); This trickery involves a bytecode transformer run automatically during the final stages of compilation; there is no runtime dependency on lombok. } &lt;pre&gt;" />
      <item value="Represents a generic type {@code T}. Java doesn't yet provide a way to represent generic types, so this class does. Forces clients to create a subclass of this class which enables retrieval the type information even at runtime. &lt;p&gt;For example, to create a type literal for {@code List&lt;String&gt;}, you can create an empty anonymous inner class: &lt;pre&gt; TypeReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; list = new TypeReference&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;() {}; &lt;pre&gt; This syntax cannot be used to create type literals that have wildcard parameters, such as {@code Class&lt;?&gt;} or {@code List&lt;? extends CharSequence&gt;}." />
      <item value="class Tuple" />
      <item value="filter Invalid Biz Show Session" />
      <item value="search Associate" />
      <item value="该节目没有授权" />
      <item value="该节目在此渠道不可售" />
      <item value="SHOW NOT EXIST" />
      <item value="该节目不存在" />
      <item value="Exception thrown when attempting to retrieve the result of a task that aborted by throwing an exception. This exception can be inspected using the {@link getCause()} method." />
      <item value="Constructs an {@code ExecutionException} with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link initCause(Throwable) initCause}." />
      <item value="Exception thrown when attempting to retrieve the result of a task that aborted by throwing an exception. This exception can be inspected using the getCause() method." />
      <item value="Execution Exception" />
      <item value="Determines if the class or interface represented by this {@code Class} object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified {@code Class} parameter. It returns {@code true} if so; otherwise it returns {@code false}. If this {@code Class} object represents a primitive type, this method returns {@code true} if the specified {@code Class} parameter is exactly this {@code Class} object; otherwise it returns {@code false}. &lt;p&gt; Specifically, this method tests whether the type represented by the specified {@code Class} parameter can be converted to the type represented by this {@code Class} object via an identity conversion or via a widening reference conversion. See &lt;em&gt;The Java Language Specification&lt;em&gt;, sections 5.1.1 and 5.1.4 , for details. @param cls the {@code Class} object to be checked @return the {@code boolean} value indicating whether objects of the type {@code cls} can be assigned to objects of this class @exception NullPointerException if the specified Class parameter is null. @since JDK1.1" />
      <item value="is Assignable From" />
      <item value="Type is the common superinterface for all types in the Java programming language. These include raw types, parameterized types, array types, type variables and primitive types." />
      <item value="Returns the {@code Throwable} instance wrapped in this {@code UndeclaredThrowableException}, which may be {@code null}. &lt;p&gt;This method predates the general-purpose exception chaining facility. The {@link ThrowablegetCause()} method is now the preferred means of obtaining this information. @return the undeclared checked exception that was thrown" />
      <item value="Undeclared Throwable Exception" />
      <item value="get Cause" />
      <item value="A common Spring annotation to declare that annotated elements can be {@code null} under some circumstance. &lt;p&gt;Leverages JSR-305 meta-annotations to indicate nullability in Java to common tools with JSR-305 support and used by Kotlin to infer nullability of Spring API. &lt;p&gt;Should be used at parameter, return value, and field level. Methods override should repeat parent {@code @Nullable} annotations unless they behave differently. &lt;p&gt;Can be used in association with {@code @NonNullApi} or {@code @NonNullFields} to override the default non-nullable semantic to nullable. @author Sebastien Deleuze @author Juergen Hoeller @since 5.0 @see NonNullApi @see NonNullFields @see NonNull" />
      <item value="layercache wrapper, for the concrete explanation of remote cache params," />
      <item value="物理过期时间" />
      <item value="LOGICAL EXPIRE SECONDS" />
      <item value="Flight Recorder" />
      <item value="SUFFIX" />
      <item value="Tuple" />
      <item value="Flight Recorder VM options can't be changed at runtime. Existing options will be used. When the default Flight Recorder VM Options are used, the 'stackdepth' parameter is set to 64. Stack traces deeper than 64 frames will be truncated." />
      <item value="SET IF PRESENT" />
      <item value="Do not set any additional command argument." />
      <item value="UPSERT" />
      <item value="SET IF ABSENT" />
      <item value="Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first. Params: timeout – the maximum time to wait unit – the time unit of the timeout argument Returns: true if this executor terminated and false if the timeout elapsed before termination Throws: InterruptedException – if interrupted while waiting" />
      <item value="If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value. Returns: the previous value associated with the specified key, or null if there was no mapping for the key" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="103" />
        <entry key="CZECH" value="1" />
        <entry key="ENGLISH" value="102" />
      </map>
    </option>
  </component>
</application>